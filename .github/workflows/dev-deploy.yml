name: DEV_CI/CD

on:
  pull_request:
    branches: [develop]

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: 현재 브랜치 코드 가져오기
        uses: actions/checkout@v4

      - name: JDK 21 환경 구성하기
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 테스트 실행
        run: ./gradlew test

      - name: 스프링 빌드 .jar 파일 생성
        run: ./gradlew clean build -x test

      - name: Debug SSH Key
        run: echo "${{ secrets.DEV_SSH_KEY }}" | wc -l

      - name: EC2 기존 app 폴더 초기화
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            rm -rf ~/app

      - name: EC2에 build/libs 디렉토리 생성
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            if [ ! -d ~/app/src/main/java/org/highfive/backend/infra/docker/build/libs ]; then
              mkdir -p ~/app/src/main/java/org/highfive/backend/infra/docker/build/libs
            fi

      - name: EC2에 log 디렉토리 생성
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            if [ ! -d ~/app/logs ]; then
              mkdir -p ~/app/logs
            fi

      - name: 빈 로그 파일 생성
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            touch ~/app/logs/app.log
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Initial log created by CI/CD" > ~/app/logs/app.log

      - name: 빌드된 JAR 파일 EC2로 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          source: "build/libs/*.jar"
          target: "~/app/src/main/java/org/highfive/backend/infra/docker/"

      - name: docker-compose 파일 EC2로 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          source: "src/main/java/org/highfive/backend/infra/docker/*"
          target: "~/app"

      - name: .env 값 주입후, docker-compose 실행
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd ~/app/src/main/java/org/highfive/backend/infra/docker
            echo "DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" > .env
            echo "JWT_SECRET=${{ secrets.DEV_JWT_SECRET }}" >> .env
            echo "DB_NAME=${{ secrets.DEV_DB_NAME }}" >> .env
            echo "DB_HOST=${{ secrets.DEV_DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DEV_DB_PORT }}" >> .env
            echo "DB_USER=${{ secrets.DEV_DB_USER }}" >> .env
            echo "REDIS_HOST=${{ secrets.DEV_REDIS_HOST }}" >> .env
            echo "REDIS_PORT=${{ secrets.DEV_REDIS_PORT }}" >> .env
            echo "SERVER_PORT=${{ secrets.DEV_SERVER_PORT }}" >> .env
            docker-compose --env-file .env -f docker-compose-dev.yml down -v
            docker-compose --env-file .env -f docker-compose-dev.yml up -d --build