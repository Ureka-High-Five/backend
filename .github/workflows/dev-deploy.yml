name: DEV_CI/CD

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
    types: [closed]

jobs:
  deploy:
#    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: 현재 브랜치 코드 가져오기
        uses: actions/checkout@v4

      - name: JDK 21 환경 구성하기
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 테스트 실행
        run: ./gradlew test

      - name: 스프링 빌드 .jar 파일 생성
        run: ./gradlew clean build -x test

      - name: Debug SSH Key
        run: echo "${{ secrets.DEV_SSH_KEY }}" | wc -l

      - name: docker-compose 파일 EC2로 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          source: "src/main/java/org/highfive/backend/infra/docker/docker-compose-dev.yml"
          target: "~/app"

      - name: .env 값 주입후, docker-compose 실행
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd ~/app/src/main/java/org/highfive/backend/infra/docker
            cat <<EOF > .env
            DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}
            JWT_SECRET=${{ secrets.DEV_JWT_SECRET }}
            DB_NAME=${{ secrets.DEV_DB_NAME }}
            DB_USER=${{ secrets.DEV_DB_USER }}
            REDIS_HOST=${{ secrets.DEV_REDIS_HOST }}
            REDIS_PORT=${{ secrets.DEV_REDIS_PORT }}
            SERVER_PORT=${{ secrets.DEV_SERVER_PORT }}
            EOF
            docker-compose --env-file .env -f docker-compose-dev.yml down
            docker-compose --env-file .env -f docker-compose-dev.yml up -d --build